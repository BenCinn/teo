WHITESPACE = _{ " " | "\t" | NEWLINE }

program = { SOI ~ block ~ EOI }
block   = { ((command ~ ";") | (set ~ ";") | (ifs) | (def) | (for_loop))+ }
expr    = { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)* }

string      =  { "\"" ~ (raw_string | escape)* ~ "\"" }
raw_string  =  { (!("\\" | "\"") ~ ANY)+ }
predefined  =  { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
hex         = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex =  { hex{1, 6} }
byte        =  { hex{2} }
byte_escape = _{ "x" ~ byte }
unicode     = _{ "u" ~ "{" ~ unicode_hex ~ "}" }
escape      = _{ "\\" ~ (predefined | byte_escape | unicode) }

bool = @{ "true" | "false" }

command   = { ident ~ "(" ~ args? ~ ")" }
set       = { primary ~ "=" ~ expr }
ifs       = { "if" ~ "(" ~ expr ~ ")" ~ ("{" ~ block ~ "}" | command ~ ";") }
def       = { "def" ~ ident ~ "(" ~ defargs? ~ ")" ~ ("{" ~ block ~ "}" | command ~ ";") }
for_loop  = { "for" ~ ident ~ "<-" ~ expr ~ loop_body }
loop_body = _{ command ~ ";" | "{" ~ block ~ "}" }

args    = { expr ~ ("," ~ expr)* }
p_type  = { "Number" | "String" | "Bool" }
defarg  = { ident ~ ":" ~ p_type }
defargs = { defarg ~ ("," ~ defarg)* }

array          = { "[" ~ array_elements? ~ "]" }
array_elements = { expr ~ ("," ~ expr)* }

alpha        =  { 'a'..'z' | 'A'..'Z' }
digit        =  { '0'..'9' }
ident_array  =  { alpha+ ~ ("[" ~ (from_to_index | from_index | to_index | index) ~ "]")? }
ident        =  { alpha+ }
comparisonop = @{ ((">" | "<") ~ "="?) | "==" | "!=" }
infix        = _{  comparisonop | add | sub | mul | div | pow }
add          =  { "+" }
sub          =  { "-" }
mul          =  { "*" }
div          =  { "/" }
pow          =  { "^" }

index         = { int }
from_to_index = { int ~ ".." ~ int }
to_index      = { ":" ~ int }
from_index    = { int ~ ":" }

prefix  = _{ neg }
neg     =  { "-" }
postfix = _{ fac }
fac     =  { "!" }

// New rule that represents an expression that can be indexed.
indexable_expr =  { array | command | ident | "(" ~ expr ~ ")" }
arr            =  { indexable_expr ~ ("[" ~ (from_to_index | from_index | to_index | index) ~ "]") }
primary        = _{ arr | command | bool | array | string | int | ident }
int            = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
